# -*- coding: utf-8 -*-
"""tcg-pokemon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x_zMqoKBNJT8I3J8oXHggGfAAQ2belag
"""

!pip install currex

from bs4 import BeautifulSoup
from currex import USD, EUR
from datetime import datetime
from google.colab import files
from openpyxl import load_workbook
import pandas as pd
import re
import requests
import time

class Carta:
  def __init__(self, nombre, precio, url):
    self.nombre = nombre
    self.precio = precio
    self.url = url

# Subida del archivo.
print('Selecciona el archivo ".txt":')
uploaded = files.upload()

# Obtención del nombre del archivo.
nombre_archivo = list(uploaded.keys())[0]

# Lectura del archivo subido.
with open(nombre_archivo, 'r', encoding = 'utf-8') as file:
  lineas = [linea.strip() for linea in file]

lista_cartas = []

for i, url in enumerate(lineas):
  print(f"Procesando URL: {url}")

  response = requests.get(url)

  # Verificar si la petición ha sido exitosa.
  if response.status_code == 200:
    html_content = response.text
    print("HTML obtenido correctamente")

    soup = BeautifulSoup(html_content, 'html.parser')

    # Nombre.
    h1 = soup.find('h1', id = 'product_name')
    nombre = h1.contents[0].strip()

    # Precio.
    precio = soup.find('td', class_ = 'price js-price')
    precio_texto = precio.text.replace(',', '').strip()
    precio_numerico = re.findall(r'[\d.]+', precio_texto)
    precio = float(precio_numerico[0])
    precio = USD(precio).to(EUR)

    # Almacenamiento de datos.
    carta = Carta(nombre, precio, url)
    lista_cartas.append(carta)

    # Sleep de 1 segundo entre iteraciones.
    if i < len(lineas) - 1:
      time.sleep(1)
      print("--------------------------------------------------")

  else:
    print(f"Error: {response.status_code}")

df = pd.DataFrame([{
  'nombre': carta.nombre,
  'precio': round(float(str(carta.precio).replace(" EUR", "").strip()), 2),
  'url': carta.url
} for carta in lista_cartas])

df_ordenado = df.sort_values('precio', ascending = False)
df_ordenado